// src/config/dbSetup.ts

import oracledb from 'oracledb';
import { getConnection } from '../config/database';

/**
 * Creates the 'users' table if it doesn't already exist.
 */
export async function setupUserTable() {
  let connection: oracledb.Connection | undefined;
  
  console.log("Attempting to create 'users' table if it doesn't exist...");

  try {
    connection = await getConnection();
    
    await connection.execute(
      `CREATE TABLE users (
          id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
          name VARCHAR2(100) NOT NULL,
          email VARCHAR2(100) NOT NULL UNIQUE,
          password_hash VARCHAR2(255) NOT NULL,
          PRIMARY KEY(id)
      )`
    );

    console.log("Table 'users' created successfully.");

  } catch (err: any) {
    // This is the crucial part: Check for the "table already exists" error
    if (err.errorNum === 955) { // ORA-00955: name is already used by an existing object
      console.log("Table 'users' already exists. Skipping creation.");
    } else {
      // If it's a different error, we should know about it
      console.error("Error creating 'users' table:", err);
      throw err; // Re-throw the error to halt startup if it's a critical issue
    }
  } finally {
    if (connection) {
      await connection.close(); // Release connection back to the pool
    }
  }
}